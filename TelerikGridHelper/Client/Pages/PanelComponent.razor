@page "/Panel"

@using TelerikGridHelper.Client.ViewBase

<head>
    <style>
        .btn-position {
            display: flex;
            justify-content: flex-end;
        }
    </style>
</head>

<TelerikCard Width="100%">
    <CardHeader Class="k-hbox justify-space-between">
        <div>
            <CardTitle>Sample Panel</CardTitle>
        </div>

        <div>
            <TelerikButton FillMode="@(ThemeConstants.Button.FillMode.Flat)" Icon="@ExpandIcon_I" OnClick="TogglePanel" Class="no-border"></TelerikButton>
        </div>
    </CardHeader>
    <TelerikAnimationContainer @ref="AnimationContainerRef_I"
                               AnimationDuration="300"
                               AnimationType="@AnimationType.None"
                               ParentInlineStyle="display: block; position: relative;">
        <CardBody Class="nopadding">
            <br />

            @if(!string.IsNullOrEmpty(ErrorMessage)) {
                <div class="k-form-hint pb-0 ml-1" style="color:red ;font-style:italic">@ErrorMessage</div>
                <br/>
            }

            @if(showEditButton) {
                <TelerikButton ButtonType="ButtonType.Button" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)"
                               Class="pb-1 m-1 exam-button btn-position" Icon="edit" OnClick="@(async () => await OnSaveOrEditButtonClick("Edit"))">Edit</TelerikButton>
                               <br />
            }
            <br />
            @*<BaseComponent> </BaseComponent>*@

            <div>
                <h3>Sample Panel</h3>
                <p>This is a sample panel to check the functionalities of <i>Edit & Save</i> buttons</p>
                <p><i>Edit </i>: This button checks if the current panel (sample panel) is being used by someone, if it is, then will show up an <i>error message</i></p>
                <p>If not, then the user will be allowed to edit the panel and save it using <i>Save</i> button</p>
                <p><i>Save </i>: This button will update the panel state to "Saved" along with the UserId.</p>
            </div>

            <br />
            @if(showSaveButton) {
                <TelerikButton ButtonType="ButtonType.Button" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)"
                               Class="pb-1 m-1 exam-button btn-position" Icon="edit" OnClick="@(async () => await OnSaveOrEditButtonClick("Save"))">Save</TelerikButton>
            }
        </CardBody>
    </TelerikAnimationContainer>
</TelerikCard>


@code {
    [Inject]
    public ViewBaseModel? viewBaseModel { get; set; }

    public bool showEditButton = true;

    public bool showSaveButton = false;

    public string ErrorMessage = "";

    public TelerikAnimationContainer AnimationContainerRef_I { get; set; }

    public bool Expanded_I { get; set; } = false;

    public string ExpandIcon_I => Expanded_I ? "arrow-chevron-up" : "arrow-chevron-down";

    public async void TogglePanel()
    {
        if (Expanded_I)
        {
            await AnimationContainerRef_I?.HideAsync();
        }
        else
        {
            await AnimationContainerRef_I?.ShowAsync();
        }
        Expanded_I = !Expanded_I;
    }


    public async Task OnSaveOrEditButtonClick(string buttonText)
    {
        ErrorMessage = await viewBaseModel.PanelHandler(buttonText);

        if(string.IsNullOrEmpty(ErrorMessage)) 
        {
            showEditButton = !showEditButton;
            showSaveButton = !showSaveButton;
        }
    }

}


